---
title: "SRE之道"
date: "2025-05-29"
categories: ['worklog']
description: "是结果还是原因，对理解SRE至关重要"
draft: true
---


Google是SRE概念的创建者，并且真诚的将实践经验总结成[《Site Reliability Engineering》](https://sre.google/sre-book/table-of-contents/)一书。（中文版《SRE Google运维解密》) SRE这个概念也在这之后真正流行了起来，被其他公司纷纷效仿。

许多关于SRE的效仿中，大家都在解释自己是如何将那本书中[实践章节](https://sre.google/sre-book/part-III-practices/)的各种名词^[SLO，SLI，故障管理，应急响应，容量管理，监控告警等等]，设计到自己的工作环境中的。而鲜有人解释，SRE究竟是为了解决什么问题。

如果不理解Google组建SRE团队的目的和逻辑，那要怎么借鉴呢？

> The closer you look, the less you see. -- [Now You See Me](https://zh.wikipedia.org/zh-cn/%E5%87%BA%E7%A5%9E%E5%85%A5%E5%8C%96)


# 竞争和扩张
彼时（2000年左右）的Google属于初创公司，雅虎是当时的顶流网站。敏捷开发流行，作为技术起家的Google也同样采用Release early, release often文化，很长时间Google的产品都[带有BETA标签](https://en.wikipedia.org/wiki/History_of_Google)。新功能快速迭代和新产品的快速上线有助于Google更快的获得更多用户，占领市场^[这个策略至今在竞争市场上依然有效]。

# 速度和质量间的平衡

快速的迭代和发布，意味着引入更频繁的变更，也意味着系统和服务出现错误的概率会更高。

![[Distributed system availability](https://docs.aws.amazon.com/whitepapers/latest/availability-and-beyond-improving-resilience/distributed-system-availability.html)](https://image.luozx.org/garden/2025/05/0b6a7a8bef26531da0ec8b5cf0c39118.png)

软件系统或服务经常出错，甚至崩溃/不可用，轻则导致用户流失，市场竞争力下降，造成公司经济损失。重则可能会对公共安全和生命安全造成威胁^[想想如果控制城市的电网系统或者负责民航的指挥系统出问题会怎样]。Google当时所面临的是第一种情况，也是现在大多数互联网公司所面临的情况。

另一方面，用户规模的快速增长，导致增加更多的硬件资源和支撑型的组件，这又会增加额外的复杂性和不确定性，同样会提升系统或服务出错的概率。

Borg，Kubernetes的前身，就是那时开发的^[[The Evolution of Kubernetes: From Borg to K8s and How it Became the Standard for Container Orchestration  ](https://romanglushach.medium.com/the-evolution-of-kubernetes-from-borg-to-k8s-and-how-it-became-the-standard-for-container-7700dcdf883b)]。

2003年，正是在这样的背景下，Google的SRE团队成立。我们现在得到的信息是什么？

1. 快速迭代和服务质量（可靠）的冲突
2. 市场竞争和用户规模的快速增长的压力

在那个时候，似乎还没有现在不追求规模的创业理念。Google想要变大，就必须在这两者之间寻求一种平衡。SRE团队是在高速迭代和高质量服务之间的缓冲。

这个缓冲带的另一个名字是：错误预算（Error Budget）。

> The structural conflict is between pace of innovation and product stability, and as described earlier, this conflict often is expressed indirectly. In SRE we bring this conflict to the fore, and then resolve it with the introduction of an error budget.
>
>   [Tenets of SRE](https://sre.google/sre-book/introduction/)

软件制品的生命周期分两部分：生产和运行。产生阶段由产品开发团队实现，运行阶段则由SRE团队维护。

生产阶段往往采用敏捷开发理念^[在当时的环境下]，想要让产品和功能的迭代速度变快。正如上图所描述的，更频繁的变更带来的是服务脆弱的风险。SRE团队则会采取"反敏捷"的方式来平衡这种风险。

错误预算让产品每次迭代的质量可度量，Google通过服务等级目标（SLO）来计算错误预算的数值。这里，错误预算和SLO都是为了解决速度和质量矛盾的产物。

那在缓冲区内发生的变更怎么办？

# 降低变更风险

减少人类在在缓冲区（错误预算）内变更的参与程度，可以有效降低变更所带来的风险。而减少人类参与的绝佳方式则是过程的（高度）自动化^[就像自动驾驶技比人类驾驶机动车更安全一样]。

谁来保障自动化本身的质量？Google的选择是强工程能力和学术能力的工程师。

>  we want systems that are **automatic**, not just **automated**

# SRE之道

要思考和解决的根本问题是：如何又快又好的提供服务。


# 附录

其他公司关于SRE实践的总结：

哔哩哔哩：[没有SLO就没有SRE？来看看B站SRE对SLO的实践总结](https://www.bilibili.com/opus/689662861736149026)

阿里巴巴：[这是阿里技术专家对 SRE 和稳定性保障的理解](https://mp.weixin.qq.com/s/DUfoMeJa0spHO0d1p0RSdQ)

美团：[云端的SRE发展与实践](https://tech.meituan.com/2017/08/03/meituanyun-sre.html)

正确的：
[RedHat](https://www.redhat.com/en/topics/devops/what-is-sre)


STAMP方法（DEVONTHINK file）
SLO局限和Google next move
