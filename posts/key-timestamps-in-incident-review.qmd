---
title: "故障事件回顾中的几个重要时间节点"
date: ""
categories: ['worklog']
draft: true
---

前几周，在阅读和整理过往记录的故障事件的时候，发现模板只要记录两个时间：

- 故障发生时间
- 故障恢复时间

乍一看，这两个时间充当“故障事件模板” 是足够的。但会让故障的影响时长严重失真，而故障时长是计算MTTR和估计可用性^[$可用性=\frac{MTBF}{MTBF+MTTR}$]的重要数据。

一个正在运行的系统，在几乎没有用户（使用）的情况下，对该系统进行了有缺陷的变更动作，直到第一个用户发现了该缺陷之间的这段时间，应该被当作故障，计算故障时长吗？

我知道你可能会想：进行了有缺陷的变更动作，监控呢？告警呢？变更之后不验证吗？没错，如果一切都做的足够好，很多问题就不再是问题了。

现实情况是：大多数公司都做的不够好。以至于靠最终用户反馈服务异常，不可用，是一个司空见惯的现象。

既然这是不可忽略的事实，也就不应该理所当然的的将「故障恢复时间-故障发生时间」统计为*故障时长*。基于此，我将故障时长明确定义为：确实影响用户使用的时间段，并且给故障模板额外增加了一个记录时间点。故障事件中需要的时间点就变成了：

- （问题）发生时间
- 影响开始时间
- （问题）修复时间

$$ 故障时长 = 修复时间 - 影响开始时间 $$ {#eq-1} 

(@eq-1)一定程度上解决了MTTR和可用性估计的准确的问题，但如果我们仅仅使用上述三个时间节点去还原应急处理的过程，过程中的一些重要数据则会丢失。

例如，执行了某项应急过程，但执行时需要一定时间：变更的回退，服务重启都属于这类情况。另外的一种情况是，应急过程虽然很快执行完毕，但传播生效则需要时间（更改DNS解析属于此类情形）

考虑上述的情况，故障事件中，完整的关键时间点应该是：

1. 发生时间：例如变更的开始时间；
1. 发现时间：由内部告警或值班时发生的异常，也是开始进行应急处置的时间
1. 影响开始时间：外部用户开始反馈的时间
1. 处置完成：应急处置结束的时间
1. 影响结束时间：用户反馈正常或者由内部验证正常（比如作为用户进行测试）




